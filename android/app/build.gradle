import org.apache.commons.codec.binary.Base64

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
  keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def dartEnvVars = [
    APP_ID_SUFFIX: null,
    VERSION_NAME_SUFFIX: null,
    APP_NAME_PREFIX: ''
];
if (project.hasProperty('dart-defines')) {
    dartEnvVars = dartEnvVars + project.property('dart-defines')
        .split(',')
        .collectEntries { entry ->
            def entry_bytes = new Base64().decode(entry)
            def entry_string = new String(entry_bytes, "UTF8")
            def pair = entry_string.split('=')
            [(pair.first()): pair.last()]
        }
}

android {
    compileSdkVersion 31

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "de.lilaherzprojekt.lilafestivalapp"
        applicationIdSuffix dartEnvVars.APP_ID_SUFFIX
        versionNameSuffix dartEnvVars.VERSION_NAME_SUFFIX
        minSdkVersion 19
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        // TODO(SF) BUILD release?
        // multiDexEnabled true
    }

    flavorDimensions "festival"
    productFlavors {
        party_san {
            dimension "festival"
            applicationId "de.lilaherzprojekt.party_san"
            resValue "string", "app_name", dartEnvVars.APP_NAME_PREFIX + "Party.San"
        }

        spirit {
            dimension "festival"
            applicationId "de.lilaherzprojekt.spirit"
            resValue "string", "app_name", dartEnvVars.APP_NAME_PREFIX + "Spirit"
        }
    }

    signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile file(keystoreProperties['storeFile'])
           storePassword keystoreProperties['storePassword']
       }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            shrinkResources true
            minifyEnabled true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // TODO(SF) BUILD release?
    // implementation 'com.android.support:multidex:1.0.3'
}
