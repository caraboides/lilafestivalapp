// Mocks generated by Mockito 5.2.0 from annotations
// in lilafestivalapp/test/providers/my_schedule_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:immortal/immortal.dart' as _i6;
import 'package:lilafestivalapp/models/event.dart' as _i4;
import 'package:lilafestivalapp/models/my_schedule.dart' as _i5;
import 'package:lilafestivalapp/services/notifications/notifications.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [Notifications].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotifications extends _i1.Mock implements _i2.Notifications {
  MockNotifications() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initializeNotificationPlugin() =>
      (super.noSuchMethod(Invocation.method(#initializeNotificationPlugin, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<int> scheduleNotificationForEvent(
          _i4.Event? event, int? notificationId) =>
      (super.noSuchMethod(
          Invocation.method(
              #scheduleNotificationForEvent, [event, notificationId]),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<void> cancelNotification(int? notificationId) => (super
      .noSuchMethod(Invocation.method(#cancelNotification, [notificationId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> verifyScheduledEventNotifications(
          _i5.MySchedule? mySchedule, _i6.ImmortalList<_i4.Event>? events) =>
      (super.noSuchMethod(
          Invocation.method(
              #verifyScheduledEventNotifications, [mySchedule, events]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
