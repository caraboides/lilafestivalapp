// Mocks generated by Mockito 5.4.5 from annotations
// in lilafestivalapp/test/utils/combined_storage_stream_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i10;
import 'dart:ui' as _i11;

import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/services.dart' as _i6;
import 'package:flutter/src/widgets/basic.dart' as _i13;
import 'package:flutter/src/widgets/framework.dart' as _i3;
import 'package:flutter/src/widgets/notification_listener.dart' as _i9;
import 'package:lilafestivalapp/services/app_storage.dart' as _i7;
import 'package:lilafestivalapp/services/festival_hub.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:optional/optional_internal.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOptional_0<T> extends _i1.SmartFake implements _i2.Optional<T> {
  _FakeOptional_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidget_1 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_2 extends _i1.SmartFake
    implements _i3.InheritedWidget {
  _FakeInheritedWidget_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_3 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info,
  }) => super.toString();
}

class _FakeFuture_4<T1> extends _i1.SmartFake implements _i5.Future<T1> {
  _FakeFuture_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAssetBundle_5 extends _i1.SmartFake implements _i6.AssetBundle {
  _FakeAssetBundle_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInheritedElement_6 extends _i1.SmartFake
    implements _i3.InheritedElement {
  _FakeInheritedElement_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [AppStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppStorage extends _i1.Mock implements _i7.AppStorage {
  MockAppStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set directory(String? _directory) => super.noSuchMethod(
    Invocation.setter(#directory, _directory),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i2.Optional<J>> loadJson<J>(String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#loadJson, [fileName]),
            returnValue: _i5.Future<_i2.Optional<J>>.value(
              _FakeOptional_0<J>(
                this,
                Invocation.method(#loadJson, [fileName]),
              ),
            ),
          )
          as _i5.Future<_i2.Optional<J>>);

  @override
  _i5.Future<void> storeJson(String? fileName, dynamic json) =>
      (super.noSuchMethod(
            Invocation.method(#storeJson, [fileName, json]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> removeFile(String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#removeFile, [fileName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [FestivalHub].
///
/// See the documentation for Mockito's code generation for more information.
class MockFestivalHub extends _i1.Mock implements _i8.FestivalHub {
  MockFestivalHub() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Optional<J>> loadJsonData<J>(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#loadJsonData, [url]),
            returnValue: _i5.Future<_i2.Optional<J>>.value(
              _FakeOptional_0<J>(this, Invocation.method(#loadJsonData, [url])),
            ),
          )
          as _i5.Future<_i2.Optional<J>>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i3.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Widget get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakeWidget_1(this, Invocation.getter(#widget)),
          )
          as _i3.Widget);

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  bool get debugDoingBuild =>
      (super.noSuchMethod(
            Invocation.getter(#debugDoingBuild),
            returnValue: false,
          )
          as bool);

  @override
  _i3.InheritedWidget dependOnInheritedElement(
    _i3.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #dependOnInheritedElement,
              [ancestor],
              {#aspect: aspect},
            ),
            returnValue: _FakeInheritedWidget_2(
              this,
              Invocation.method(
                #dependOnInheritedElement,
                [ancestor],
                {#aspect: aspect},
              ),
            ),
          )
          as _i3.InheritedWidget);

  @override
  void visitAncestorElements(_i3.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(#visitAncestorElements, [visitor]),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i3.ElementVisitor? visitor) => super.noSuchMethod(
    Invocation.method(#visitChildElements, [visitor]),
    returnValueForMissingStub: null,
  );

  @override
  void dispatchNotification(_i9.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(#dispatchNotification, [notification]),
        returnValueForMissingStub: null,
      );

  @override
  _i4.DiagnosticsNode describeElement(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeElement, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_3(
              this,
              Invocation.method(#describeElement, [name], {#style: style}),
            ),
          )
          as _i4.DiagnosticsNode);

  @override
  _i4.DiagnosticsNode describeWidget(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeWidget, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_3(
              this,
              Invocation.method(#describeWidget, [name], {#style: style}),
            ),
          )
          as _i4.DiagnosticsNode);

  @override
  List<_i4.DiagnosticsNode> describeMissingAncestor({
    required Type? expectedAncestorType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeMissingAncestor, [], {
              #expectedAncestorType: expectedAncestorType,
            }),
            returnValue: <_i4.DiagnosticsNode>[],
          )
          as List<_i4.DiagnosticsNode>);

  @override
  _i4.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#describeOwnershipChain, [name]),
            returnValue: _FakeDiagnosticsNode_3(
              this,
              Invocation.method(#describeOwnershipChain, [name]),
            ),
          )
          as _i4.DiagnosticsNode);
}

/// A class which mocks [AssetBundle].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetBundle extends _i1.Mock implements _i6.AssetBundle {
  MockAssetBundle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i10.ByteData> load(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#load, [key]),
            returnValue: _i5.Future<_i10.ByteData>.value(_i10.ByteData(0)),
          )
          as _i5.Future<_i10.ByteData>);

  @override
  _i5.Future<_i11.ImmutableBuffer> loadBuffer(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#loadBuffer, [key]),
            returnValue: _i5.Future<_i11.ImmutableBuffer>.value(
              _i12.dummyValue<_i11.ImmutableBuffer>(
                this,
                Invocation.method(#loadBuffer, [key]),
              ),
            ),
          )
          as _i5.Future<_i11.ImmutableBuffer>);

  @override
  _i5.Future<String> loadString(String? key, {bool? cache = true}) =>
      (super.noSuchMethod(
            Invocation.method(#loadString, [key], {#cache: cache}),
            returnValue: _i5.Future<String>.value(
              _i12.dummyValue<String>(
                this,
                Invocation.method(#loadString, [key], {#cache: cache}),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<T> loadStructuredData<T>(
    String? key,
    _i5.Future<T> Function(String)? parser,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#loadStructuredData, [key, parser]),
            returnValue:
                _i12.ifNotNull(
                  _i12.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#loadStructuredData, [key, parser]),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_4<T>(
                  this,
                  Invocation.method(#loadStructuredData, [key, parser]),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<T> loadStructuredBinaryData<T>(
    String? key,
    _i5.FutureOr<T> Function(_i10.ByteData)? parser,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#loadStructuredBinaryData, [key, parser]),
            returnValue:
                _i12.ifNotNull(
                  _i12.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#loadStructuredBinaryData, [key, parser]),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_4<T>(
                  this,
                  Invocation.method(#loadStructuredBinaryData, [key, parser]),
                ),
          )
          as _i5.Future<T>);

  @override
  void evict(String? key) => super.noSuchMethod(
    Invocation.method(#evict, [key]),
    returnValueForMissingStub: null,
  );

  @override
  void clear() => super.noSuchMethod(
    Invocation.method(#clear, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [DefaultAssetBundle].
///
/// See the documentation for Mockito's code generation for more information.
class MockDefaultAssetBundle extends _i1.Mock
    implements _i13.DefaultAssetBundle {
  MockDefaultAssetBundle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AssetBundle get bundle =>
      (super.noSuchMethod(
            Invocation.getter(#bundle),
            returnValue: _FakeAssetBundle_5(this, Invocation.getter(#bundle)),
          )
          as _i6.AssetBundle);

  @override
  _i3.Widget get child =>
      (super.noSuchMethod(
            Invocation.getter(#child),
            returnValue: _FakeWidget_1(this, Invocation.getter(#child)),
          )
          as _i3.Widget);

  @override
  bool updateShouldNotify(_i3.InheritedWidget? oldWidget) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [oldWidget]),
            returnValue: false,
          )
          as bool);

  @override
  _i3.InheritedElement createElement() =>
      (super.noSuchMethod(
            Invocation.method(#createElement, []),
            returnValue: _FakeInheritedElement_6(
              this,
              Invocation.method(#createElement, []),
            ),
          )
          as _i3.InheritedElement);

  @override
  String toStringShort() =>
      (super.noSuchMethod(
            Invocation.method(#toStringShort, []),
            returnValue: _i12.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
          )
          as String);

  @override
  void debugFillProperties(_i4.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(#debugFillProperties, [properties]),
        returnValueForMissingStub: null,
      );

  @override
  String toStringShallow({
    String? joiner = ', ',
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringShallow, [], {
              #joiner: joiner,
              #minLevel: minLevel,
            }),
            returnValue: _i12.dummyValue<String>(
              this,
              Invocation.method(#toStringShallow, [], {
                #joiner: joiner,
                #minLevel: minLevel,
              }),
            ),
          )
          as String);

  @override
  String toStringDeep({
    String? prefixLineOne = '',
    String? prefixOtherLines,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.debug,
    int? wrapWidth = 65,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringDeep, [], {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
              #wrapWidth: wrapWidth,
            }),
            returnValue: _i12.dummyValue<String>(
              this,
              Invocation.method(#toStringDeep, [], {
                #prefixLineOne: prefixLineOne,
                #prefixOtherLines: prefixOtherLines,
                #minLevel: minLevel,
                #wrapWidth: wrapWidth,
              }),
            ),
          )
          as String);

  @override
  _i4.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i4.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toDiagnosticsNode, [], {
              #name: name,
              #style: style,
            }),
            returnValue: _FakeDiagnosticsNode_3(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
          )
          as _i4.DiagnosticsNode);

  @override
  List<_i4.DiagnosticsNode> debugDescribeChildren() =>
      (super.noSuchMethod(
            Invocation.method(#debugDescribeChildren, []),
            returnValue: <_i4.DiagnosticsNode>[],
          )
          as List<_i4.DiagnosticsNode>);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}
