// Mocks generated by Mockito 5.2.0 from annotations
// in lilafestivalapp/test/utils/combined_storage_stream_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;
import 'dart:typed_data' as _i6;
import 'dart:ui' as _i7;

import 'package:flutter/foundation.dart' as _i5;
import 'package:flutter/rendering.dart' as _i4;
import 'package:flutter/services.dart' as _i8;
import 'package:flutter/src/widgets/basic.dart' as _i13;
import 'package:flutter/src/widgets/framework.dart' as _i3;
import 'package:flutter/src/widgets/notification_listener.dart' as _i12;
import 'package:lilafestivalapp/services/app_storage.dart' as _i9;
import 'package:lilafestivalapp/services/festival_hub.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:optional/optional_internal.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeOptional_0<T> extends _i1.Fake implements _i2.Optional<T> {}

class _FakeWidget_1 extends _i1.Fake implements _i3.Widget {
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_2 extends _i1.Fake implements _i3.InheritedWidget {
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_3 extends _i1.Fake implements _i4.DiagnosticsNode {
  @override
  String toString(
          {_i5.TextTreeConfiguration? parentConfiguration,
          _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeByteData_4 extends _i1.Fake implements _i6.ByteData {}

class _FakeImmutableBuffer_5 extends _i1.Fake implements _i7.ImmutableBuffer {}

class _FakeAssetBundle_6 extends _i1.Fake implements _i8.AssetBundle {}

class _FakeInheritedElement_7 extends _i1.Fake implements _i3.InheritedElement {
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [AppStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppStorage extends _i1.Mock implements _i9.AppStorage {
  MockAppStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set directory(String? _directory) =>
      super.noSuchMethod(Invocation.setter(#directory, _directory),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i2.Optional<J>> loadJson<J>(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#loadJson, [fileName]),
              returnValue: Future<_i2.Optional<J>>.value(_FakeOptional_0<J>()))
          as _i10.Future<_i2.Optional<J>>);
  @override
  _i10.Future<void> storeJson(String? fileName, dynamic json) =>
      (super.noSuchMethod(Invocation.method(#storeJson, [fileName, json]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> removeFile(String? fileName) => (super.noSuchMethod(
      Invocation.method(#removeFile, [fileName]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
}

/// A class which mocks [FestivalHub].
///
/// See the documentation for Mockito's code generation for more information.
class MockFestivalHub extends _i1.Mock implements _i11.FestivalHub {
  MockFestivalHub() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i2.Optional<J>> loadJsonData<J>(String? url) =>
      (super.noSuchMethod(Invocation.method(#loadJsonData, [url]),
              returnValue: Future<_i2.Optional<J>>.value(_FakeOptional_0<J>()))
          as _i10.Future<_i2.Optional<J>>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i3.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Widget get widget => (super.noSuchMethod(Invocation.getter(#widget),
      returnValue: _FakeWidget_1()) as _i3.Widget);
  @override
  bool get debugDoingBuild => (super
          .noSuchMethod(Invocation.getter(#debugDoingBuild), returnValue: false)
      as bool);
  @override
  _i3.InheritedWidget dependOnInheritedElement(_i3.InheritedElement? ancestor,
          {Object? aspect}) =>
      (super.noSuchMethod(
          Invocation.method(
              #dependOnInheritedElement, [ancestor], {#aspect: aspect}),
          returnValue: _FakeInheritedWidget_2()) as _i3.InheritedWidget);
  @override
  void visitAncestorElements(bool Function(_i3.Element)? visitor) =>
      super.noSuchMethod(Invocation.method(#visitAncestorElements, [visitor]),
          returnValueForMissingStub: null);
  @override
  void visitChildElements(_i3.ElementVisitor? visitor) =>
      super.noSuchMethod(Invocation.method(#visitChildElements, [visitor]),
          returnValueForMissingStub: null);
  @override
  void dispatchNotification(_i12.Notification? notification) => super
      .noSuchMethod(Invocation.method(#dispatchNotification, [notification]),
          returnValueForMissingStub: null);
  @override
  _i4.DiagnosticsNode describeElement(String? name,
          {_i5.DiagnosticsTreeStyle? style =
              _i5.DiagnosticsTreeStyle.errorProperty}) =>
      (super.noSuchMethod(
          Invocation.method(#describeElement, [name], {#style: style}),
          returnValue: _FakeDiagnosticsNode_3()) as _i4.DiagnosticsNode);
  @override
  _i4.DiagnosticsNode describeWidget(String? name,
          {_i5.DiagnosticsTreeStyle? style =
              _i5.DiagnosticsTreeStyle.errorProperty}) =>
      (super.noSuchMethod(
          Invocation.method(#describeWidget, [name], {#style: style}),
          returnValue: _FakeDiagnosticsNode_3()) as _i4.DiagnosticsNode);
  @override
  List<_i4.DiagnosticsNode> describeMissingAncestor(
          {Type? expectedAncestorType}) =>
      (super.noSuchMethod(
          Invocation.method(#describeMissingAncestor, [],
              {#expectedAncestorType: expectedAncestorType}),
          returnValue: <_i4.DiagnosticsNode>[]) as List<_i4.DiagnosticsNode>);
  @override
  _i4.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(Invocation.method(#describeOwnershipChain, [name]),
          returnValue: _FakeDiagnosticsNode_3()) as _i4.DiagnosticsNode);
}

/// A class which mocks [AssetBundle].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetBundle extends _i1.Mock implements _i8.AssetBundle {
  MockAssetBundle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i6.ByteData> load(String? key) =>
      (super.noSuchMethod(Invocation.method(#load, [key]),
              returnValue: Future<_i6.ByteData>.value(_FakeByteData_4()))
          as _i10.Future<_i6.ByteData>);
  @override
  _i10.Future<_i7.ImmutableBuffer> loadBuffer(String? key) =>
      (super.noSuchMethod(Invocation.method(#loadBuffer, [key]),
              returnValue:
                  Future<_i7.ImmutableBuffer>.value(_FakeImmutableBuffer_5()))
          as _i10.Future<_i7.ImmutableBuffer>);
  @override
  _i10.Future<String> loadString(String? key, {bool? cache = true}) => (super
      .noSuchMethod(Invocation.method(#loadString, [key], {#cache: cache}),
          returnValue: Future<String>.value('')) as _i10.Future<String>);
  @override
  _i10.Future<T> loadStructuredData<T>(
          String? key, _i10.Future<T> Function(String)? parser) =>
      (super.noSuchMethod(Invocation.method(#loadStructuredData, [key, parser]),
          returnValue: Future<T>.value(null)) as _i10.Future<T>);
  @override
  void evict(String? key) =>
      super.noSuchMethod(Invocation.method(#evict, [key]),
          returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [DefaultAssetBundle].
///
/// See the documentation for Mockito's code generation for more information.
class MockDefaultAssetBundle extends _i1.Mock
    implements _i13.DefaultAssetBundle {
  MockDefaultAssetBundle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.AssetBundle get bundle => (super.noSuchMethod(Invocation.getter(#bundle),
      returnValue: _FakeAssetBundle_6()) as _i8.AssetBundle);
  @override
  _i3.Widget get child => (super.noSuchMethod(Invocation.getter(#child),
      returnValue: _FakeWidget_1()) as _i3.Widget);
  @override
  bool updateShouldNotify(_i3.InheritedWidget? oldWidget) =>
      (super.noSuchMethod(Invocation.method(#updateShouldNotify, [oldWidget]),
          returnValue: false) as bool);
  @override
  _i3.InheritedElement createElement() =>
      (super.noSuchMethod(Invocation.method(#createElement, []),
          returnValue: _FakeInheritedElement_7()) as _i3.InheritedElement);
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  void debugFillProperties(_i4.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toStringShallow(
          {String? joiner = r', ',
          _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.debug}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toStringShallow, [], {#joiner: joiner, #minLevel: minLevel}),
          returnValue: '') as String);
  @override
  String toStringDeep(
          {String? prefixLineOne = r'',
          String? prefixOtherLines,
          _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.debug}) =>
      (super.noSuchMethod(
          Invocation.method(#toStringDeep, [], {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel
          }),
          returnValue: '') as String);
  @override
  _i4.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i5.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toDiagnosticsNode, [], {#name: name, #style: style}),
          returnValue: _FakeDiagnosticsNode_3()) as _i4.DiagnosticsNode);
  @override
  List<_i4.DiagnosticsNode> debugDescribeChildren() =>
      (super.noSuchMethod(Invocation.method(#debugDescribeChildren, []),
          returnValue: <_i4.DiagnosticsNode>[]) as List<_i4.DiagnosticsNode>);
  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}
